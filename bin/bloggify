#!/usr/bin/env node

// Dependencies
var Bloggify = require("../lib")
  , Logger = require("bug-killer")
  , Prompt = require("prompt")
  , ConfigSchema = require("./config-schema")
  , Couleurs = require("couleurs")()
  , Fs = require("fs")
  ;

// Configurations
Logger.config.displayDate = false;
Logger.config.logLevel = 4;

Prompt.start();
Prompt.message = "";
Prompt.delimiter = "";

/**
 * handler
 * Calls the Bloggify tools functions.
 *
 * @name handler
 * @function
 * @param {String} name The Bloggify Tools method.
 * @param {Array} args An array with the arguments (default: `[]`).
 * @return {undefined}
 */
function handler(name, args) {
    args = args || [];
    args.push(function (err, data) {
        if (err) { return Logger.log(err, "error"); }
    });
    Bloggify[name].apply(Bloggify, args).on("progress", function (data) {
        Logger.log(data.content, data.type);
    });

}

/**
 * processPluginInfo
 * This function will ask the user for plugin configurations.
 *
 * @name processPluginInfo
 * @function
 * @param {Object} conf The configuration object.
 * @param {Function} callback The callback function.
 * @return {undefined}
 */
function processPluginInfo(conf, callback) {

    var plugins = []
      , keys = Object.keys(conf.plugins)
      ;

    /**
     * checkSeq
     * Gets the configuration for the current plugin.
     *
     * @name checkSeq
     * @function
     * @param {Number} i The current index.
     * @return {undefined}
     */
    function checkSeq(i) {

        var c = keys[i];
        if (!c) {
            conf.plugins = plugins;
            return callback(null, conf);
        }

        var cAnswer = conf.plugins[c]
          , pluginSchema = ConfigSchema.properties.plugins.properties[c]._
          ;

        /**
         * addPlugin
         * Adds the plugin into the plugin list.
         *
         * @name addPlugin
         * @function
         * @param {Object|undefined} r The configuration object or `undefined`.
         * @return {undefined}
         */
        function addPlugin(r) {
            switch (c) {
                case "dashboard":
                    plugins = plugins.concat([{
                        name: "article-tags"
                      , source: "git@github.com:Bloggify/article-tags.git"
                      , version: "master"
                    }, {
                        name: "custom-client-files"
                      , source: "git@github.com:Bloggify/custom-client-files.git"
                      , version: "master"
                    }, {
                        name: "api"
                      , source: "git@github.com:IonicaBizau/api.git"
                      , version: "master"
                    }, {
                        name: "dashboard",
                        source: "git@github.com:IonicaBizau/dashboard.git",
                        version: "master",
                        config: r
                    }]);
                    break;
                case "contactForm":
                    plugins.push({
                        name: "contact-form"
                      , source: "git@github.com:Bloggify/contact-form.git"
                      , version: "2.0.0"
                      , config: r
                    });
                    break;
                case "lightbox":
                    plugins.push({
                        name: "lightbox"
                      , source: "git@github.com:Bloggify/lightbox.git"
                      , version: "2.0.0"
                    });
                    break;
                case "rss":
                    plugins.push({
                        name: "rss"
                      , source: "git@github.com:Bloggify/rss.git"
                      , version: "master"
                      , config: r
                    });
                    break;
                case "social":
                    plugins.push({
                        name: "social"
                      , source: "git@github.com:Bloggify/social.git"
                      , version: "master"
                    });
                    break;
            }
        }

        if (/y/i.test(cAnswer)) {
            if (pluginSchema) {
                Prompt.get({ properties: pluginSchema }, function (err, res) {
                    if (err) { return callback(err); }
                    if (c === "dashboard") {
                        res = { users: [res] };
                    }
                    addPlugin(res);
                    checkSeq(i + 1);
                });
                return;
            }
            addPlugin();
            checkSeq(i + 1);
            return;
        }

        checkSeq(i + 1);
    }

    checkSeq(0);
}

/**
 * getUserConf
 *
 * @name getUserConf
 * @function
 * @param {Function} callback The callback function.
 * @return {undefined}
 */
function getUserConf(callback) {
    Prompt.get(ConfigSchema, function (err, result) {
        if (err) { return callback(err); }
        result.port = parseInt(result.port);
        if (isNaN(result.port)) {
            delete result.port;
        }
        result.database.uri = "mongodb://localhost:27017/" + result.database.uri;
        processPluginInfo(result, callback);
    });
}

// Options
switch (process.argv[2]) {
    case "init":
        Logger.log(Couleurs.fg("Welcome to Bloggify! First of all we have to set some configurations here.", "#f1c40f"), "info");
        getUserConf(function (err, conf) {
            if (err) { return Logger.log(err, "error"); }
            handler("init", [{
                dest: process.cwd()
              , conf: conf
            }])
        });
        break;
    case "install":
        handler("install");
        break;
    default:
        console.log(Fs.readFileSync(__dirname + "/docs/help", "utf-8"));
        break;
}
