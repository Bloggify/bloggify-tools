#!/usr/bin/env node

// Dependencies
var Bloggify = require("../lib")
  , Logger = require("bug-killer")
  , Prompt = require("prompt")
  , ConfigSchema = require("./config-schema")
  , Couleurs = require("couleurs")()
  ;

// Configurations
Logger.config.displayDate = false;
Logger.config.logLevel = 4;

Prompt.start();
Prompt.message = "";
Prompt.delimiter = "";

/**
 * handler
 * Calls the Bloggify tools functions.
 *
 * @name handler
 * @function
 * @param {String} name The Bloggify Tools method.
 * @param {Array} args An array with the arguments (default: `[]`).
 * @return {undefined}
 */
function handler(name, args) {
    args = args || [];
    args.push(function (err, data) {
        if (err) { return Logger.log(err, "error"); }
    });
    Bloggify[name].apply(Bloggify, args).on("progress", function (data) {
        Logger.log(data.content, data.type);
    });

}

/**
 * getUserConf
 *
 * @name getUserConf
 * @function
 * @param {Function} callback The callback function.
 * @return {undefined}
 */
function getUserConf(callback) {
    Prompt.get(ConfigSchema, function (err, result) {
        if (err) { return callback(err); }
        result.port = parseInt(result.port);
        if (isNaN(result.port)) {
            delete result.port;
        }
        result.database.uri = "mongodb://localhost:27017/" + result.database.uri;
        callback(null, result);
    });
}

// Options
switch (process.argv[2]) {
    case "init":
        Logger.log(Couleurs.fg("Welcome to Bloggify! First of all we have to set some configurations here.", "#f1c40f"), "info");
        getUserConf(function (err, conf) {
            if (err) { return Logger.log(err, "error"); }
            handler("init", [{
                dest: process.cwd()
              , conf: conf
            }])
        });
        break;
    case "install":
        handler("install");
        break;
}
